{"name": "test_case[case0]", "status": "broken", "statusDetails": {"message": "KeyError: 'feature'", "trace": "self = <test_runner.TestRunner object at 0x102d41c40>\ncase = {'id': 'case1', 'is_true': True, 'step_name': 'case1-1', 'step_num': 1}\n\n    @pytest.mark.parametrize(\"case\", data)\n    def test_case(self, case):\n    \n            # 引用全局的all\n            all = self.all\n    \n            #根据all的值，渲染case\n            case = eval(Template(str(case)).render(all))\n            #case是实参\n            # 渲染前：原本的数据源excel是列表，每一条用例是一个case是字典，先转成字符串str(case)，方便渲染\n            # {\"Authorization\": \"{{TOKEN}}\"}     \"{{TOKEN}}\"：字典的 值，这里不是最终文本，而是 Jinja2 占位符（模板变量）\n            # {{ ... }} 是 Jinja2 的语法，表示“把里面这个变量的值渲染进来”\n            # 放在引号里是为了让渲染后的结果仍是一个“合法的字符串值”\n            # 渲染时：render()是Template包的渲染函数\n            # 渲染后：再用eval()转成字典\n            # 外层花括号是字典，占位符要双大括；值是字符串要引号，渲染之后再反序列。\n    \n            #初始化allure报告\n>           allure_init(case=case)#形参=实参  参数只有一个时形参可以不写\n            ^^^^^^^^^^^^^^^^^^^^^^\n\ntestcases/test_runner.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncase = {'id': 'case1', 'is_true': True, 'step_name': 'case1-1', 'step_num': 1}\n\n    def allure_init(case):#case是形参\n>       allure.dynamic.feature(case[\"feature\"])\n                               ^^^^^^^^^^^^^^^\nE       KeyError: 'feature'\n\nutils/allure_utils.py:5: KeyError"}, "parameters": [{"name": "case", "value": "{'id': 'case1', 'step_num': 1, 'step_name': 'case1-1', 'is_true': True}"}], "start": 1760335144530, "stop": 1760335144531, "uuid": "86ceb36d-a6f9-4a6b-8631-167a665183d6", "historyId": "cc7fa3d72355a9a6085312fe30ca072b", "testCaseId": "f4c9a5433c9d0f70aa3669f0895ebca2", "fullName": "testcases.test_runner.TestRunner#test_case", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_runner"}, {"name": "subSuite", "value": "TestRunner"}, {"name": "host", "value": "WenjideMacBook-Pro.local"}, {"name": "thread", "value": "86592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_runner"}], "titlePath": ["testcases", "test_runner.py", "TestRunner"]}